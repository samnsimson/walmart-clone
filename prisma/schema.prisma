// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String    @id @default(uuid())
  firstName String
  lastName  String
  email     String    @unique
  phone     BigInt    @unique
  address   String
  city      String
  state     String
  country   String
  pincode   BigInt
  password  String
  token     String
  isActive  Boolean
  cart      Cart[]
  billing   Billing[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  review    Review[]
}

model Product {
  id                String     @id @default(uuid())
  sku               String
  slug              String?    @unique @db.Text()
  name              String
  description       String
  retailPrice       Int
  salePrice         Int
  image             String[]
  specification     Json?
  categories        Category[]
  review            Review[]
  relatedProducts   Product[]  @relation("relatedProducts")
  relatedToProducts Product[]  @relation("relatedProducts")
  brand             Brand?     @relation(fields: [brandId], references: [id])
  brandId           String?
  carts             Cart[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@unique([sku])
}

model Category {
  id            String     @id @default(uuid())
  name          String
  description   String?
  subCategories Category[] @relation("subCategory")
  parent        Category?  @relation("subCategory", fields: [parentId], references: [id])
  parentId      String?
  products      Product[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  products  Product[]
  billing   Billing    @relation(fields: [billingId], references: [id])
  billingId String
  status    CartStatus @default(PENDING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Brand {
  id        String    @id @default(uuid())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Billing {
  id        String   @id @default(uuid())
  address   String
  city      String
  state     String
  country   String
  pincode   String
  phone     String
  email     String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  cart      Cart[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  title     String
  review    String
  rating    Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CartStatus {
  PENDING
  PROCESSED
  ABANDONED
}
